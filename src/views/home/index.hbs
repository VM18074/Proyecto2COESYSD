<div id="map">

    <!--aqui va todo del mapa-->

</div>
<div class="signal-direction"><a class="btn" href="#alertas">
        <p class="text-secondary m-1">
            <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor"
                class="bi bi-arrow-down-circle-fill" viewBox="0 0 16 16">
                <path
                    d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v5.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V4.5z" />
            </svg>
        </p>
        <span class="fs-5  text-secondary">Click para ver las alertas</span>
    </a>
</div>
<div class="h-100 pt-5">
    <section class="container mt-5">
        <header>
            <h1 class="text-center mb-5">Alertas Activas</h1>
        </header>
        <div class="scrollable shadow mb-5 bg-body  rounded">

            <table id="alertas" class="table">

                <thead>
                    <tr>
                        <th scope="col">Nombre</th>
                        <th scope="col">Descripción</th>
                        <th scope="col">Daños</th>
                        <th scope="col">Nivel</th>
                        <th scope="col">Departamento</th>
                        <th scope="col">Municipio</th>
                        <th scope="col">Respuesta</th>
                        <th scope="col">Editar</th>
                    </tr>

                </thead>
                <tbody>
                    {{#each dataRows}}
                    <tr>
                        <td>{{nombre}}</td>
                        <td>{{descripcion}}</td>
                        <td>{{Daño.nombre}}</td>
                        <td class="text-capitalize fw-bold nivel-alerta" data-nivel="{{nivelAlerta}}">{{nivelAlerta}}
                        </td>
                        <td class="departamento">{{Ubicacion.departamento}}</td>
                        <td class="municipio">{{Ubicacion.municipio}}</td>
                        <td>{{Medida.nombre}}</td>
                        <td><a class="btn btn-light" href="/#alertas/editar/{{id}}">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                    class="bi bi-journal-x" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd"
                                        d="M6.146 6.146a.5.5 0 0 1 .708 0L8 7.293l1.146-1.147a.5.5 0 1 1 .708.708L8.707 8l1.147 1.146a.5.5 0 0 1-.708.708L8 8.707 6.854 9.854a.5.5 0 0 1-.708-.708L7.293 8 6.146 6.854a.5.5 0 0 1 0-.708z" />
                                    <path
                                        d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z" />
                                    <path
                                        d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z" />
                                </svg>
                            </a></td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>

        </div>
    </section>

    <section class="container mt-5">
        <header>
            <h1 class="text-center mb-5">Gráficos </h1>
        </header>
        <div class="row">
            <div class="col-6">
                <h2 class="text-center mb-4">Cantidad de alertas</h2>
                <canvas id="chartPieDeparments" width="100%" height="100%"></canvas>
                <button class="btn btn-primary download--pdf--chart" data-target="chartPieDeparments">Descargar
                    PDF</button>
            </div>
            <div class="col-6">
                <h2 class="text-center mb-4">Alertas por Departamento</h2>
                <canvas id="chartBarDeparments" width="100%" height="100%"></canvas>
                <button class="btn btn-primary download--pdf--chart" data-target="chartBarDeparments">Descargar
                    PDF</button>
            </div>

        </div>
        <div class="row">
            <div class="col-6">
                <h2 class="text-center mb-4">Alertas por Municipio</h2>
                <canvas id="chartLineMunicipios" width="100%" height="100%"></canvas>
                <button class="btn btn-primary download--pdf--chart" data-target="chartLineMunicipios">Descargar
                    PDF</button>

            </div>

        </div>
    </section>
</div>

<script src="/js/leaflet.js"></script>
<script src="/js/Control.MiniMap.min.js"></script>
<script src="/js/leaflet-beautify-marker-icon.js"></script>
<script src="/js/chart.min.js"></script>
<script src="/js/jspdf.min.js"></script>

{{!-- Configuraciones de estilos --}}


<script>
    const tableAlertas = document.getElementById('alertas')
    const nivelAlertaRows = [...tableAlertas.querySelectorAll('.nivel-alerta')]
    const coloresDeNiveles = {
        amarilla: 'text-warning',
        roja: 'text-danger',
        verde: 'text-success'
    }
    nivelAlertaRows.forEach((alerta) => {
        const nivelDeAlerta = alerta.dataset.nivel
        alerta.classList.add(coloresDeNiveles[nivelDeAlerta])
    })

</script>


{{!-- Configuraciones del mapa interactivo --}}
<script>
    var southWest = L.latLng(11.651058, -89.929926),
        northEast = L.latLng(14.708478, -87.62146),
        bounds = L.latLngBounds(southWest, northEast);

    var map = L.map('map', {
        maxBounds: bounds

    }).setView([13.682016, -88.720093], 9);

    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {

        maxZoom: 19,
        minZoom: 9,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    //marcadore de alertas
    var pinAzul = L.marker([13.682016, -88.720093]).addTo(map).bindPopup('El Salvador');

    //marcadores de alertas con propiedades funcional -->
    L.marker([13.89093747081252, -88.7734375], { icon: L.BeautifyIcon.icon(), draggable: true }).addTo(map).bindPopup("Prueba1");
    var options = {
        html: '<i class="material-icons">face</i>',
        iconAnchor: [11, 10]
    };

    L.marker([13.89093747081252, -88.8934375], { icon: L.BeautifyIcon.icon(options), draggable: true }).addTo(map).bindPopup("Prueba2");
    options = {
        icon: 'plane'
        , borderColor: '#8D208B'
        , textColor: '#8D208B'
        , backgroundColor: 'transparent'
    };// <-- Termina aqui el marcador de alertas con propiedad funcional 

    //NOTA LA VARIABLE OPTIONS DETERMINA COMO SE MOSTRARA

    // Agregando pluggin
    var carto_light = L.tileLayer('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', { minZoom: 0, maxZoom: 13 });

    //MiniMap
    var miniMap = new L.Control.MiniMap(carto_light).addTo(map);</script>

<script>

    url: "src/public/css/images/Warning.png",
</script>

<script>
    //Agregando recuadro para los pins de las alertas (Leyenda)
        const legenda = L.control.Legend({
            position: "bottomright",
            collapsed: false,
            symbolWidth: 24,
            opacity: 1,
            column: 1,
            legends: [{
                label: "Daños",
                type: "image",
                radius: 6,
                color: "blue",
                fillColor: "#FF0000",
                fillOpacity: 0.6,
                weight: 2,
                layers: [pinAzul],
                url: "src/public/css/images/Warning.png",
                inactive: false
            }]
        }).addTo(map);
</script>

{{!-- Graficos --}}
<script>
    const ctxPieDeparments = document.getElementById('chartPieDeparments')
    const ctxBarDeparments = document.getElementById('chartBarDeparments')
    const ctxLineMunicipios = document.getElementById('chartLineMunicipios')

    const dataPieDeparments = [
        tableAlertas.querySelectorAll('.text-danger').length,
        tableAlertas.querySelectorAll('.text-success').length,
        tableAlertas.querySelectorAll('.text-warning').length,
    ]


    const dataBarDeparments = {
        'Ahuachapán': 0,
        'Cabañas': 0,
        'Chalatenango': 0,
        'Cuscatlán': 0,
        'La Libertad': 0,
        'La Paz': 0,
        'La Unión': 0,
        'Morazán': 0,
        'San Miguel': 0,
        'San Salvador': 0,
        'San Vicente': 0,
        'Santa Ana': 0,
        'Sonsonate': 0,
        'Usulután': 0,
    }
    const dataLineMunicipios = {}

    const departamentosConAlertasActivas = [...tableAlertas.querySelectorAll('.departamento')]
    departamentosConAlertasActivas.forEach((departamento) => {
        dataBarDeparments[departamento.textContent] = dataBarDeparments[departamento.textContent] + 1
    })

    const municipiosConAlertasActivas = [...tableAlertas.querySelectorAll('.municipio')]
    municipiosConAlertasActivas.forEach((municipio) => {
        dataLineMunicipios[municipio.textContent] = 0
    })
    municipiosConAlertasActivas.forEach((municipio) => {
        dataLineMunicipios[municipio.textContent] = dataLineMunicipios[municipio.textContent] + 1
    })
    new Chart(ctxPieDeparments, {

        type: 'pie',
        data: {
            labels: ['Alertas Rojas', 'Alertas Verdes', 'Alertas Amarillas'],
            datasets: [{
                label: 'Cantidad de alertas',
                data: dataPieDeparments,
                backgroundColor: [
                    'rgba(255, 99, 132)',
                    'rgba(75, 192, 192)',
                    'rgba(255, 206, 86)',
                ],
            }]
        },
    })


    new Chart(ctxBarDeparments, {
        type: 'bar',
        data: {
            labels: Object.keys(dataBarDeparments),
            datasets: [{
                label: 'Departamentos',
                data: Object.values(dataBarDeparments),
                backgroundColor: [
                    'rgb(41, 52, 98)',
                    'rgb(28, 214, 206)',
                    'rgb(254, 219, 57)',
                    'rgb(214, 28, 78)',
                    'rgb(49, 225, 247)',
                    'rgb(216, 0, 166)',
                    'rgb(255, 119, 119)',
                    'rgb(4, 0, 154)',
                    'rgb(240, 235, 204)',
                    'rgb(227, 199, 112)',
                    'rgb(177, 175, 255)',
                    'rgb(200, 255, 212)',
                    'rgb(159, 135, 114)',
                    'rgb(204, 54, 54)',
                ],
            }]
        },

    })

    new Chart(ctxLineMunicipios, {
        type: 'line',
        data: {
            labels: Object.keys(dataLineMunicipios),
            datasets: [{
                label: 'Municipios',
                data: Object.values(dataLineMunicipios),
                backgroundColor: ['rgb(41, 52, 98)'],
            }]
        },
        options: {
            scales: {
                y: {
                    min: 0
                }
            }
        },
    })

    const buttonsForDownloadChartAsPDF = [...document.querySelectorAll('.download--pdf--chart')]
    buttonsForDownloadChartAsPDF.forEach((button) => {
        button.addEventListener('click', () => {
            const target = button.dataset.target
            const chartCanvas = document.getElementById(target)
            const canvasImage = chartCanvas.toDataURL('image/png', 1.0)
            let pdf = new jspdf.jsPDF('landscape')
            pdf.text(chartCanvas.previousElementSibling.textContent, 15, 15)
            pdf.addImage(canvasImage, 'PNG', 50, 30, 150, 150)

            pdf.save('chart.pdf')
        })
    })

</script>